import java.sql.*;
import java.io.*;

/**
 * This program takes one or more CSV data files stored in the
 * data/csv directory and parses them into a SQLite Database
 * before moving them into the data/csv/processed directory.
 * 
 * The point of this program is to assist in analyzing data for
 * FRC Team 868's prototype ball shooter, being built for the
 * 2020 FRC Season. Anyone not part of this project is not
 * likely to find this program useful.
 * 
 * For members of FRC 868 who are looking to use this program,
 * follow these instructions:
 * 
 * 1. Run a trial of the shooter prototype, with the Smart Dashboard
 *    configured to output data to a CSV file. Make sure to keep the
 *    fields on the Smart Dashboard to a minimum. Ideally, only the 
 *    shooter motor speeds (i.e. encoder counts) and possible current
 *    PID gains should be output to the Smart Dashboard.
 * 
 * 2. When your trial is done, copy the CSV file generated by the
 *    Smart Dashboard to the data/csv directory of this project.
 * 
 * 3. Run this program. It may take a minute or so to finish,
 *    depending on how much data you collected in your trial.
 * 
 * 4. Once the program has finished running, navigate to the
 *    data/sqlite directory, and run sqlite3 Shooter.db in a
 *    terminal/command prompt.
 * 
 * 5. You can now write SQL statements to view/process the data
 *    from your trial run however you like. Alternatively, you
 *    may want to try a graphical tool such as SQLite Database
 *    browser if you are not comfortable working directly in
 *    SQL.
 * 
 * This program has been tested successfully on Windows and
 * Linux. If you have any questions or are having trouble
 * running it correctly, contact the author.
 * 
 * @author acr
 */
public class Parser {    
    private static Connection conn = null; // The SQLite database connection object
    private static int trialNum = 0; // The number of the current trial run

    public static void main(String[] args) {    
        connect();        
        trialNum = getTrialNum();        
        processDataDir();
        closeConnection();
    }

    /**
     * Connect to the sqlite database.
     */
    public static void connect() {        
        try {
            String url = "jdbc:sqlite:data/sqlite/Shooter.db";
            conn = DriverManager.getConnection(url);            
        }catch(SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Close the SQLite database connection.
     */
    public static void closeConnection() {
        try {
            conn.close();
        }catch(SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Calculate the current trial number based on the trial numbers
     * already present in the database. Each new run of the Parser
     * program should represent a new trial run.
     * 
     * @return The current trial number.
     */
    public static int getTrialNum() {
        int lastTrialNum = 0;
        try {
            String sql = "SELECT MAX(TRIAL_NUMBER) FROM TRIALS";
            java.sql.Statement statement = conn.createStatement();
            ResultSet rs = statement.executeQuery(sql);
            lastTrialNum = rs.getInt(1);

            
        }catch(SQLException e) {
            e.printStackTrace();
        }

        return lastTrialNum + 1;
    }

    /**
     * Iterate over every CSV file in the data/csv directory,
     * parse it, and move it to the data/csv/processed directory
     * when finished.
     */
    public static void processDataDir() {
        File dir = new File("./data/csv");
        File[] files = dir.listFiles(new FilenameFilter(){
        
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".csv");
            }
        });

        for(File csvFile : files) {
            parseCSVFile(csvFile.getAbsolutePath());
            moveParsedFile(csvFile.getAbsolutePath());
        }
    }

    /**
     * Iterate through the contents of file fileName and insert
     * the data into the SQLite database.
     * 
     * @param fileName The name of the file to parse.
     */
    public static void parseCSVFile(String fileName) {
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(fileName));
            String line;
            int count = 0;
            while((line = reader.readLine()) != null) {
                if(count > 0) { //Skip the header line
                    String[] data = line.split(",");

                    String sql = "INSERT INTO TRIALS VALUES (?,?,?,?)";

                    PreparedStatement statement = conn.prepareStatement(sql);
                    statement.setInt(1, Integer.parseInt(data[0]));
                    statement.setString(2, data[1]);
                    double speed;
                    try {
                        speed = Double.parseDouble(data[2]);
                    }catch(NumberFormatException nfe) {
                        speed = 0;
                    }
                    statement.setDouble(3, speed);
                    statement.setInt(4, trialNum);

                    statement.executeUpdate();
                }
                count++;
            }
            reader.close();
        }catch(IOException e) {
            e.printStackTrace();
        }catch(SQLException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Move file fileName to the processed directory.
     * 
     * @param fileName The name of the file to move.
     */
    public static void moveParsedFile(String fileName) {        
        File old = new File(fileName);
        old.renameTo(new File("data/csv/processed/" + old.getName()));
    }
}